name: Reusable CI workflow for APIs.

on:
  workflow_call:
    inputs:

      api-project:
        required: true
        description: Path to the main API project.
        type: string

      artifact-name:
        required: true
        description: Root name for the build artifact.
        type: string

# Only run one instance of this workflow at a time per branch.
concurrency:
  group: ${{ github.ref_name }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  DOTNET_NOLOGO: true
  NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

jobs:

  test_build_release:
    name: Test, Build, Publish on ${{ matrix.operating-system }}
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

        ## using latest LTS release - also it MUST be the SDK version.
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json
          source-url: "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      - name: Build with dotnet
        run: dotnet build --configuration Release /WarnAsError

      - name: Unit Tests (with Coverage)
        shell: bash
        run: |
              # Skip code coverage test on Windows because it errors out after getting "confused" about the number of test projects.
              if [ "$RUNNER_OS" == "Windows" ]; then
                dotnet test
              else
                dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput=../../lcov test/**
              fi

      - name: Save Code Coverage Output
        # Coverage output isn't created on Windows, so don't upload it.
        if: matrix.operating-system != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.operating-system }}
          path: lcov.info

      - name: Download install tools
        uses: actions/checkout@v4
        with:
          repository: nciocpl/nci.ocpl.api.shared
          # Ref will need to be updated when version changes.
          ref: v2.x
          path: shared

      - name: Publish
        shell: bash
        run: |
            dotnet publish -c Release -o $GITHUB_WORKSPACE/out/${{ inputs.artifact-name }}-api ${{ inputs.api-project }}

            ## directory for build-info.json
            mkdir -p $GITHUB_WORKSPACE/out/${{ inputs.artifact-name }}-api/wwwroot/

            # Copy deploy toool.
            cp $GITHUB_WORKSPACE/shared/tools/deploy-api.ps1 $GITHUB_WORKSPACE/out/

      - name: Record metadata
        uses: nciocpl/build-info-action@v1.0.1
        with:
            output-name: "${{ github.workspace }}/out/${{ inputs.artifact-name }}-api/wwwroot/build-info.json"

      - name: Upload Published Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}-api-${{ matrix.operating-system }}
          path: out


  integration_tests:
    name: Run Integration Tests (on Linux)
    runs-on: ubuntu-latest
    needs: test_build_release
    services:
      elasticsearch:
        image: elasticsearch:7.17.5
        env:
            discovery.type: single-node
            ES_JAVA_OPTS: -Xms750m -Xmx750m
            # Turn off warnings about not using HTTPS.
            xpack.security.enabled: false
        ports:
          ## NOTE: This will be exposed as a random port referenced below by job.services.elasticsearch.ports[9200]
          - 9200/tcp
        options: --health-cmd="curl http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - name: Check out code
        uses: actions/checkout@v4

        # If a particular API project needs to do some special docker setup
        # (e.g. Sitewide Search sets up synonyms for Elasticsearch), it should
        # be encapsulated in a docker-setup.sh script.
      - name: project-specific Docker setup.
        shell: bash
        run: |
            if [[ -e 'integration-tests/bin/docker-setup.sh' ]]; then
              CONTAINER_ID=$(docker ps -q --filter "ancestor=elasticsearch:7.17.5")
              integration-tests/bin/docker-setup.sh $CONTAINER_ID
            fi

      - name: Download Published Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}-api-ubuntu-latest
          path: built-api

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json
          source-url: "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      - name: Load Data into elasticsearch & prepare for tests
        env:
          ELASTIC_SEARCH_HOST: http://localhost:${{ job.services.elasticsearch.ports[9200] }}
        shell: bash
        run: |
              ## Create test output and API logging location
              mkdir -p integration-tests/target

              ## Load the elasticsearch data
              ./integration-tests/bin/load-integration-data.sh

      - name: Start API
        env:
          Elasticsearch__Servers: http://localhost:${{ job.services.elasticsearch.ports[9200] }}
          ASPNETCORE_LOGGING__CONSOLE__DISABLECOLORS: true
          API_URL: http://localhost:5000
          SLEEP_TIMEOUT: 5
          WAIT_DURATION: 120
          APP_PATH: ${{ github.workspace }}/built-api/${{ inputs.artifact-name }}-api
        shell: bash
        run: |
              ## Start the app and log output
              ## NOTE: We must change directory because in order for dotnet to be able to locate the appsettings.json file.
              cd $APP_PATH && ${{ github.workspace }}/integration-tests/bin/start-api.sh > ${{ github.workspace }}/integration-tests/target/api_log.txt 2>&1 &

              time_waited=1
              echo "Checking status of ${API_URL}."
              until $(curl --output /dev/null --silent --fail ${API_URL}); do
                echo $?

                if [ $time_waited -ge $WAIT_DURATION ]; then
                    echo "Waited past duration. Exiting"
                    cat integration-tests/target/api_log.txt
                    exit 1
                fi

                sleep $SLEEP_TIMEOUT
                time_waited=$((time_waited + SLEEP_TIMEOUT))
              done

              echo "API is up"

      - name: Run Integration Test
        id: integration_tests
        shell: bash
        run: |
              ## Run Karate
              cd integration-tests && ./bin/karate ./features

      - name: Upload Integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: integration-tests/target
